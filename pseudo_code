For each node i:

State //WANT,HELD,RELEASED
VotedRequest //The latest request which have been voted but not in CS
HasVoted
HasInquired
VotingSet //A hashtable (key=node_id, value=msg or none) marking the type of response the node has received (GRANT/FAIL/None)
RequestQueue //A priority queue caching ungranted requests
NumVotesReceived

RequestCS:
	State = REQUEST
	++Timer
	Multicast(REQUEST, VotingSet)
	# wait for the votes...

EnterCS:
	State = HELD
	++Timer

ExitCS:
	State = RELEASED
	++Timer
	reset related voting count
	Multicast(RELEASE, VotingSet)

OnRequest(REQUEST):
	Timer = max(Timer + 1, REQUEST.ts)
	if State = HELD: //At this time , Voted must be True
		RequestQueue.add(REQUEST.ts, REQUEST)
	else:
		if HasVoted = True:
			RequestQueue.add(REQUEST.ts, REQUEST) 
			if REQUEST.ts < VotedRequest.ts and HasInquired = False:
				send(INQUIRE, VotedRequest.src)
				HasInquired = True
			else:
				send(FAIL, REQUEST.src)
		else:
			send(GRANT, REQUEST.src)
			update related flags

OnRelease(RELEASE): 
	Timer = max(Timer + 1, RELEASE.ts)
	HasInquired = False
	if RequestQueue is not empty:
		CurrRequest = RequestQueue.pop() //get the cached request with smallest timestamp
		send(GRANT, CurrRequest.src)
		update related flags
	else:
		reset related flags

OnGrant(GRANT)
	Timer = max(Timer + 1, GRANT.ts)
	VotingSet[GRANT.src] = GRANT
	++NumVotesReceived

OnFail(FAIL):
	Timer = max(Timer + 1, FAIL.ts)
	VotingSet[FAIL.src] = FAIL

OnInquire(INQUIRE): //(INQUIRE.src.VotedRequest).src = i
	Timer = max(Timer + 1, INQUIRE.ts)
	If State != HELD:
		VotingSet[INQUIRE.src] = None
		--NumVotedReceived
		send(YIELD, INQUIRE.src) 

OnYield(YIELD):
	Timer = max(Timer + 1, YIELD.ts)
	RequestQueue.add(VotedReqeust.ts, VotedRequest)
	OnRelease()
